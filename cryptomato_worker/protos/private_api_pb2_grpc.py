# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import private_api_pb2 as private__api__pb2


class ManagerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Evaluation = channel.unary_unary(
                '/Manager/Evaluation',
                request_serializer=private__api__pb2.EvaluationRequest.SerializeToString,
                response_deserializer=private__api__pb2.EvaluationReply.FromString,
                )


class ManagerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Evaluation(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Evaluation': grpc.unary_unary_rpc_method_handler(
                    servicer.Evaluation,
                    request_deserializer=private__api__pb2.EvaluationRequest.FromString,
                    response_serializer=private__api__pb2.EvaluationReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Evaluation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/Evaluation',
            private__api__pb2.EvaluationRequest.SerializeToString,
            private__api__pb2.EvaluationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SandboxExecStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SandboxExec = channel.unary_unary(
                '/SandboxExec/SandboxExec',
                request_serializer=private__api__pb2.SandboxExecRequest.SerializeToString,
                response_deserializer=private__api__pb2.SandboxExecReply.FromString,
                )
        self.SandboxWriteStdin = channel.unary_unary(
                '/SandboxExec/SandboxWriteStdin',
                request_serializer=private__api__pb2.SandboxWriteStdinRequest.SerializeToString,
                response_deserializer=private__api__pb2.SandboxWriteStdinReply.FromString,
                )


class SandboxExecServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SandboxExec(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SandboxWriteStdin(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SandboxExecServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SandboxExec': grpc.unary_unary_rpc_method_handler(
                    servicer.SandboxExec,
                    request_deserializer=private__api__pb2.SandboxExecRequest.FromString,
                    response_serializer=private__api__pb2.SandboxExecReply.SerializeToString,
            ),
            'SandboxWriteStdin': grpc.unary_unary_rpc_method_handler(
                    servicer.SandboxWriteStdin,
                    request_deserializer=private__api__pb2.SandboxWriteStdinRequest.FromString,
                    response_serializer=private__api__pb2.SandboxWriteStdinReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SandboxExec', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SandboxExec(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SandboxExec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SandboxExec/SandboxExec',
            private__api__pb2.SandboxExecRequest.SerializeToString,
            private__api__pb2.SandboxExecReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SandboxWriteStdin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SandboxExec/SandboxWriteStdin',
            private__api__pb2.SandboxWriteStdinRequest.SerializeToString,
            private__api__pb2.SandboxWriteStdinReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
